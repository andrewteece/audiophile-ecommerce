import fs from 'fs';
import path from 'path';
import sharp from 'sharp';

const PUBLIC_DIR = path.resolve(__dirname, '../public/assets');
const OUTPUT_PATH = path.resolve(__dirname, '../src/lib/blurData.ts');

const supportedExtensions = ['.jpg', '.jpeg', '.png', '.webp'];

const getAllImageFiles = (dir: string): string[] => {
  return fs.readdirSync(dir).flatMap((file) => {
    const fullPath = path.join(dir, file);
    const stat = fs.statSync(fullPath);
    if (stat.isDirectory()) return getAllImageFiles(fullPath);
    const ext = path.extname(file).toLowerCase();
    return supportedExtensions.includes(ext) ? [fullPath] : [];
  });
};

const generateBlurMap = async () => {
  const imagePaths = getAllImageFiles(PUBLIC_DIR);
  const blurMap: Record<string, string> = {};

  for (const imgPath of imagePaths) {
    const key = path
      .relative(PUBLIC_DIR, imgPath)
      .replace(/\.[^/.]+$/, '') // remove file extension
      .replace(/[\\/]/g, '_'); // normalize slashes and dots

    const mimeType = `image/${path.extname(imgPath).replace('.', '')}`;
    const buffer = await sharp(imgPath).resize(10).toBuffer();
    const base64 = buffer.toString('base64');
    blurMap[key] = `data:${mimeType};base64,${base64}`;
  }

  return blurMap;
};

const writeBlurDataFile = async () => {
  const blurMap = await generateBlurMap();

  const tsOutput = `// Auto-generated by generate-blurs.ts
export const BLUR_IMAGE = ${JSON.stringify(blurMap, null, 2)};
`;

  fs.writeFileSync(OUTPUT_PATH, tsOutput);
  console.log(`✅ BlurData written to ${OUTPUT_PATH}`);
};

writeBlurDataFile().catch((err) => {
  console.error('❌ Error generating blur data:', err);
});
